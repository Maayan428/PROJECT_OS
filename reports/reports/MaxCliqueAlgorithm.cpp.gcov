        -:    0:Source:MaxCliqueAlgorithm.cpp
        -:    1:#include "MaxCliqueAlgorithm.hpp"
        -:    2:#include <sstream>
        -:    3:#include <algorithm>
        -:    4:
        -:    5:/**
        -:    6: * @brief Executes the Max Clique algorithm on the given graph.
        -:    7: *
        -:    8: * This function initializes the search for the largest complete subgraph (clique)
        -:    9: * by recursively checking all combinations of nodes and comparing their connectivity.
        -:   10: *
        -:   11: * @param graph The input graph to analyze.
        -:   12: * @return A string describing the size and members of the maximum clique.
        -:   13: */
function _ZN18MaxCliqueAlgorithm3runB5cxx11ERK5Graph called 1 returned 100% blocks executed 84%
        1:   14:std::string MaxCliqueAlgorithm::run(const Graph& graph) {
        1:   15:    int n = graph.getSize();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   16:    maxClique.clear(); // Clear previous results
call    0 returned 1
        1:   17:    std::vector<int> current; // Holds current subset being tested
call    0 returned 1
        -:   18:
        1:   19:    findMaxClique(graph, current, 0); // Start recursive search from node 0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   20:
        1:   21:    std::ostringstream out;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   22:    out << "Maximum Clique Size: " << maxClique.size() << "\n";
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:   23:    out << "Clique Members: ";
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        4:   24:    for (int v : maxClique)
call    0 returned 1
call    1 returned 1
call    2 returned 3
call    3 returned 3
call    4 returned 4
branch  5 taken 3
branch  6 taken 1 (fallthrough)
        3:   25:        out << v << " ";
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        1:   26:    out << "\n";
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        2:   27:    return out.str();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   28:}
call    0 returned 1
call    1 returned 1
call    2 never executed
call    3 never executed
        -:   29:
        -:   30:/**
        -:   31: * @brief Checks if a given set of vertices forms a clique.
        -:   32: *
        -:   33: * A clique is a subset of vertices such that every two vertices are connected.
        -:   34: *
        -:   35: * @param graph The graph in which to check the subset.
        -:   36: * @param nodes The subset of vertices to test.
        -:   37: * @return true if the subset forms a clique, false otherwise.
        -:   38: */
function _ZN18MaxCliqueAlgorithm8isCliqueERK5GraphRKSt6vectorIiSaIiEE called 50 returned 100% blocks executed 100%
       50:   39:bool MaxCliqueAlgorithm::isClique(const Graph& graph, const std::vector<int>& nodes) {
       83:   40:    for (size_t i = 0; i < nodes.size(); ++i) {
call    0 returned 83
branch  1 taken 65
branch  2 taken 18 (fallthrough)
       95:   41:        for (size_t j = i + 1; j < nodes.size(); ++j) {
call    0 returned 95
branch  1 taken 62
branch  2 taken 33 (fallthrough)
        -:   42:            // If any two nodes are not connected, it's not a clique
       62:   43:            if (!graph.edgeExists(nodes[i], nodes[j]))
call    0 returned 62
call    1 returned 62
call    2 returned 62
branch  3 taken 32 (fallthrough)
branch  4 taken 30
       32:   44:                return false;
        -:   45:        }
        -:   46:    }
       18:   47:    return true;
        -:   48:}
        -:   49:
        -:   50:/**
        -:   51: * @brief Recursively searches for the maximum clique in the graph using backtracking.
        -:   52: *
        -:   53: * This function explores all subsets of vertices starting from a given index,
        -:   54: * and keeps track of the largest clique found.
        -:   55: *
        -:   56: * @param graph The input graph.
        -:   57: * @param current The current subset being built.
        -:   58: * @param start The index to start adding new vertices from.
        -:   59: */
function _ZN18MaxCliqueAlgorithm13findMaxCliqueERK5GraphRSt6vectorIiSaIiEEi called 19 returned 100% blocks executed 100%
       19:   60:void MaxCliqueAlgorithm::findMaxClique(const Graph& graph, std::vector<int>& current, int start) {
       19:   61:    int n = graph.getSize();
call    0 returned 19
        -:   62:
        -:   63:    // Update maxClique if the current one is larger
       19:   64:    if (current.size() > maxClique.size())
call    0 returned 19
call    1 returned 19
branch  2 taken 3 (fallthrough)
branch  3 taken 16
        3:   65:        maxClique = current;
call    0 returned 3
        -:   66:
       69:   67:    for (int i = start; i < n; ++i) {
branch  0 taken 50
branch  1 taken 19 (fallthrough)
       50:   68:        current.push_back(i);
call    0 returned 50
branch  1 taken 50 (fallthrough)
branch  2 taken 0 (throw)
       50:   69:        if (isClique(graph, current)) {
call    0 returned 50
branch  1 taken 50 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 18 (fallthrough)
branch  4 taken 32
        -:   70:            // Recurse to try to grow the clique
       18:   71:            findMaxClique(graph, current, i + 1);
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
        -:   72:        }
       50:   73:        current.pop_back(); // Backtrack
call    0 returned 50
        -:   74:    }
       19:   75:}

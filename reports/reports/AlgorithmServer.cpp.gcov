        -:    0:Source:AlgorithmServer.cpp
        -:    1:#include "AlgorithmServer.hpp"
        -:    2:#include "AlgorithmFactory.hpp"
        -:    3:#include <arpa/inet.h>
        -:    4:#include <netinet/in.h>
        -:    5:#include <sys/socket.h>
        -:    6:#include <unistd.h>
        -:    7:#include <iostream>
        -:    8:#include <sstream>
        -:    9:#include <string>
        -:   10:#include <vector>
        -:   11:#include <memory>
        -:   12:#include <cstring>
        -:   13:#include <random>
        -:   14:#include <set>
        -:   15:#include <csignal> // For signal handling
        -:   16:
        -:   17:#define BUFFER_SIZE 2048
        -:   18:
        -:   19:// === Signal handling ===
        -:   20:volatile sig_atomic_t stop_flag = 0;
        -:   21:
function _Z14signal_handleri called 0 returned 0% blocks executed 0%
    #####:   22:void signal_handler(int signum) {
    #####:   23:    stop_flag = 1;
    #####:   24:}
        -:   25:
        -:   26:/**
        -:   27: * @brief Constructs the AlgorithmServer with a specified port.
        -:   28: * @param port Port number the server should listen on.
        -:   29: */
function _ZN15AlgorithmServerC2Ei called 1 returned 100% blocks executed 100%
        1:   30:AlgorithmServer::AlgorithmServer(int port) : port_(port) {}
        -:   31:
        -:   32:/**
        -:   33: * @brief Sends a message to the client.
        -:   34: * @param client_fd File descriptor of the client socket.
        -:   35: * @param msg The message to send.
        -:   36: */
function _ZN15AlgorithmServer11sendMessageEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 39 returned 100% blocks executed 100%
       39:   37:void AlgorithmServer::sendMessage(int client_fd, const std::string& msg) {
       39:   38:    send(client_fd, msg.c_str(), msg.size(), 0);
call    0 returned 39
call    1 returned 39
call    2 returned 39
       39:   39:}
        -:   40:
function _Z11receiveLineB5cxx11i called 16 returned 100% blocks executed 81%
       16:   41:std::string receiveLine(int client_fd) {
       16:   42:    std::string input;
call    0 returned 16
        -:   43:    char ch;
        -:   44:
        -:   45:    while (true) {
      101:   46:        ssize_t bytes_read = recv(client_fd, &ch, 1, 0);
call    0 returned 101
branch  1 taken 101 (fallthrough)
branch  2 taken 0 (throw)
     101*:   47:        if (bytes_read <= 0) break;
branch  0 taken 0 (fallthrough)
branch  1 taken 101
      101:   48:        if (ch == '\n') break;
branch  0 taken 16 (fallthrough)
branch  1 taken 85
       85:   49:        input += ch;
call    0 returned 85
branch  1 taken 85 (fallthrough)
branch  2 taken 0 (throw)
       85:   50:    }
        -:   51:
        -:   52:    // Trim end
       16:   53:    input.erase(input.find_last_not_of(" \r\t") + 1);
call    0 returned 16
call    1 returned 16
branch  2 taken 16 (fallthrough)
branch  3 taken 0 (throw)
       32:   54:    return input;
    =====:   55:}
call    0 never executed
        -:   56:
        -:   57:/**
        -:   58: * @brief Receives graph specifications from the client and generates a random graph accordingly.
        -:   59: * @param client_fd File descriptor of the client socket.
        -:   60: * @param num_vertices Output parameter for number of vertices.
        -:   61: * @return The generated Graph object.
        -:   62: * @throws std::runtime_error if input is invalid or connection fails.
        -:   63: */
function _ZN15AlgorithmServer12receiveGraphEiRi called 9 returned 67% blocks executed 72%
        9:   64:Graph AlgorithmServer::receiveGraph(int client_fd, int& num_vertices) {
        9:   65:    sendMessage(client_fd,
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 9
branch  4 taken 9 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 9
call    7 never executed
        -:   66:        "Welcome to the Algorithm Server!\n"
        -:   67:        "----------------------------------\n"
        -:   68:        "Please enter a request in the following format:\n"
        -:   69:        "   <vertices> <edges> <random_seed>\n"
        -:   70:        "Example: 6 10 42\n"
        -:   71:        "- vertices: number of nodes in the graph (must be > 0)\n"
        -:   72:        "- edges: number of edges (>= 0)\n"
        -:   73:        "- random_seed: any integer for reproducibility\n"
        -:   74:        "Type 'exit' or 'q' to quit.\n\n> ");
        -:   75:
        9:   76:    std::string input = receiveLine(client_fd);
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
        9:   77:    if (input == "exit") {
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 1 (fallthrough)
branch  4 taken 8
        1:   78:        sendMessage(client_fd, "Goodbye! You have disconnected from the server.\n");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
call    7 never executed
        1:   79:        shutdown(client_fd, SHUT_RDWR);
call    0 returned 1
        1:   80:        close(client_fd);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   81:        std::cout << "[Server] Client disconnected.\n";
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   82:        throw std::runtime_error("Client exited");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 never executed
        8:   83:    } else if (input == "q") {
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 1 (fallthrough)
branch  4 taken 7
        1:   84:        stop_flag = 1;
        1:   85:        shutdown(client_fd, SHUT_RDWR);
call    0 returned 1
        1:   86:        close(client_fd);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   87:        std::cout << "[Server] Server shutdown requested by client.\n";
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   88:        throw std::runtime_error("Shutdown requested");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 never executed
        -:   89:    }
        -:   90:
        7:   91:    std::istringstream iss(input);
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        -:   92:    int num_edges, seed;
        7:   93:    if (!(iss >> num_vertices >> num_edges >> seed) || num_vertices <= 0 || num_edges < 0)
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 7
branch  7 taken 7 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 7
branch 10 taken 7 (fallthrough)
branch 11 taken 0 (throw)
branch 12 taken 6 (fallthrough)
branch 13 taken 1
branch 14 taken 6 (fallthrough)
branch 15 taken 0
branch 16 taken 0 (fallthrough)
branch 17 taken 6
branch 18 taken 1 (fallthrough)
branch 19 taken 6
        1:   94:        throw std::runtime_error("Invalid input format. Usage: <vertices> <edges> <random_seed>");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 never executed
        -:   95:
        6:   96:    Graph g(num_vertices);
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:   97:    std::mt19937 rng(seed);
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:   98:    std::uniform_int_distribution<int> dist(0, num_vertices - 1);
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:   99:    std::set<std::pair<int, int>> edge_set;
call    0 returned 6
        -:  100:
       62:  101:    while ((int)edge_set.size() < num_edges) {
call    0 returned 62
branch  1 taken 56
branch  2 taken 6 (fallthrough)
       56:  102:        int u = dist(rng);
call    0 returned 56
branch  1 taken 56 (fallthrough)
branch  2 taken 0 (throw)
       56:  103:        int v = dist(rng);
call    0 returned 56
branch  1 taken 56 (fallthrough)
branch  2 taken 0 (throw)
       56:  104:        if (u != v) {
branch  0 taken 47 (fallthrough)
branch  1 taken 9
       47:  105:            int a = std::min(u, v);
call    0 returned 47
       47:  106:            int b = std::max(u, v);
call    0 returned 47
       47:  107:            if (edge_set.insert({a, b}).second) {
call    0 returned 47
call    1 returned 47
branch  2 taken 47 (fallthrough)
branch  3 taken 0 (throw)
branch  4 taken 43 (fallthrough)
branch  5 taken 4
       43:  108:                g.addEdge(a, b);
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
        -:  109:            }
        -:  110:        }
        -:  111:    }
        -:  112:
        6:  113:    sendMessage(client_fd, "Graph created successfully!\n");
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 6
branch  4 taken 6 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 6
call    7 never executed
       12:  114:    return g;
       10:  115:}
call    0 returned 6
call    1 returned 6
call    2 returned 6
call    3 never executed
call    4 never executed
call    5 returned 1
call    6 returned 3
        -:  116:
        -:  117:/**
        -:  118: * @brief Prompts the client for the name of the algorithm to run.
        -:  119: * @param client_fd File descriptor of the client socket.
        -:  120: * @return The algorithm name as a string.
        -:  121: */
function _ZN15AlgorithmServer20receiveAlgorithmNameB5cxx11Ei called 7 returned 100% blocks executed 64%
        7:  122:std::string AlgorithmServer::receiveAlgorithmName(int client_fd) {
        7:  123:    sendMessage(client_fd,
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 7
call    7 never executed
        -:  124:        "\nNow enter the name of the algorithm you want to run (options: mst, hamilton, scc, maxclique):\n> ");
        7:  125:    return receiveLine(client_fd);
call    0 returned 7
        -:  126:}
        -:  127:
        -:  128:/**
        -:  129: * @brief Handles a single client connection, including graph creation and algorithm execution.
        -:  130: * @param client_fd File descriptor of the client socket.
        -:  131: */
function _ZN15AlgorithmServer12handleClientEi called 2 returned 100% blocks executed 47%
        2:  132:void AlgorithmServer::handleClient(int client_fd) {
        -:  133:    try {
        2:  134:        sendMessage(client_fd, "Welcome to the Algorithm Server!\n===============================\n");
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 2
call    7 never executed
        -:  135:
        9:  136:        while (!stop_flag) {
branch  0 taken 9
branch  1 taken 0 (fallthrough)
        9:  137:            int num_vertices = -1;
        9:  138:            Graph g;
call    0 returned 9
        -:  139:
        -:  140:            try {
        9:  141:                g = receiveGraph(client_fd, num_vertices);
call    0 returned 9
branch  1 taken 6 (fallthrough)
branch  2 taken 3 (throw)
call    3 returned 6
call    4 returned 6
        3:  142:            } catch (const std::exception& ex) {
branch  0 taken 0 (fallthrough)
branch  1 taken 3
call    2 returned 3
       13:  143:                if (std::string(ex.what()) == "Client exited" || std::string(ex.what()) == "Shutdown requested") {
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 3
branch  5 taken 3 (fallthrough)
branch  6 taken 0 (throw)
branch  7 taken 2 (fallthrough)
branch  8 taken 1
call    9 returned 2
call   10 returned 2
branch 11 taken 2 (fallthrough)
branch 12 taken 0 (throw)
call   13 returned 2
branch 14 taken 2 (fallthrough)
branch 15 taken 0 (throw)
branch 16 taken 1 (fallthrough)
branch 17 taken 1
branch 18 taken 2 (fallthrough)
branch 19 taken 1
call   20 returned 2
branch 21 taken 2 (fallthrough)
branch 22 taken 1
branch 23 taken 3 (fallthrough)
branch 24 taken 0
call   25 returned 3
branch 26 taken 3 (fallthrough)
branch 27 taken 0
branch 28 taken 2 (fallthrough)
branch 29 taken 1
branch 30 never executed (fallthrough)
branch 31 never executed
call   32 never executed
branch 33 never executed (fallthrough)
branch 34 never executed
branch 35 never executed (fallthrough)
branch 36 never executed
call   37 never executed
branch 38 never executed (fallthrough)
branch 39 never executed
        2:  144:                    return;
        -:  145:                } else {
        1:  146:                    sendMessage(client_fd, std::string("Error: ") + ex.what() + "\n");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
call   13 returned 1
call   14 returned 1
call   15 returned 1
call   16 never executed
call   17 never executed
call   18 never executed
        1:  147:                    continue;
        -:  148:                }
        3:  149:            }
call    0 returned 3
branch  1 taken 2 (fallthrough)
branch  2 taken 1
call    3 never executed
        -:  150:
        6:  151:            std::string algo;
call    0 returned 6
        6:  152:            std::unique_ptr<StrategyAlgorithm> strategy;
        -:  153:            while (true) {
        7:  154:                algo = receiveAlgorithmName(client_fd);
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 7
call    4 returned 7
        7:  155:                if (algo == "exit") {
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 0 (fallthrough)
branch  4 taken 7
    #####:  156:                    sendMessage(client_fd, "Goodbye! You have disconnected from the server.\n");
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
call    7 never executed
    #####:  157:                    shutdown(client_fd, SHUT_RDWR);
call    0 never executed
    #####:  158:                    close(client_fd);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  159:                    std::cout << "[Server] Client disconnected.\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  160:                    return;
        7:  161:                } else if (algo == "q") {
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 0 (fallthrough)
branch  4 taken 7
    #####:  162:                    stop_flag = 1;
    #####:  163:                    shutdown(client_fd, SHUT_RDWR);
call    0 never executed
    #####:  164:                    close(client_fd);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  165:                    std::cout << "[Server] Server shutdown requested by client.\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  166:                    return;
        -:  167:                }
        -:  168:
        -:  169:                try {
        7:  170:                    strategy = AlgorithmFactory::create(algo);
call    0 returned 7
branch  1 taken 6 (fallthrough)
branch  2 taken 1 (throw)
call    3 returned 6
call    4 returned 6
        6:  171:                    break;
        1:  172:                } catch (const std::exception& e) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
call    2 returned 1
        1:  173:                    sendMessage(client_fd, std::string("Error: Unknown algorithm: ") + algo + "\n");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
call   12 returned 1
call   13 returned 1
call   14 returned 1
call   15 never executed
call   16 never executed
call   17 never executed
        1:  174:                }
call    0 returned 1
call    1 never executed
        1:  175:            }
        -:  176:
        6:  177:            std::string result = strategy->run(g);
call    0 returned 6
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0 (throw)
        6:  178:            sendMessage(client_fd, "\nResult:\n" + result + "\n");
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 6
branch  4 taken 6 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 6
branch  7 taken 6 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 6
call   10 returned 6
call   11 never executed
call   12 never executed
        -:  179:
        6:  180:            sendMessage(client_fd,
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 6
branch  4 taken 6 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 6
call    7 never executed
        -:  181:                "\nYou may enter a new graph and algorithm now, or type 'exit' to quit.\n");
        9:  182:        }
call    0 returned 6
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0
call    4 returned 6
branch  5 taken 6 (fallthrough)
branch  6 taken 0
call    7 returned 9
branch  8 taken 6
branch  9 taken 2
branch 10 taken 1
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -:  183:
    =====:  184:    } catch (const std::exception& ex) {
branch  0 never executed (fallthrough)
branch  1 never executed
call    2 never executed
    =====:  185:        sendMessage(client_fd, std::string("Error: ") + ex.what() + "\n");
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    =====:  186:    }
call    0 never executed
call    1 never executed
        -:  187:
    #####:  188:    shutdown(client_fd, SHUT_RDWR);
call    0 never executed
    #####:  189:    close(client_fd);
call    0 never executed
    #####:  190:    std::cout << "[Server] Client disconnected.\n";
call    0 never executed
        -:  191:}
        -:  192:
        -:  193:/**
        -:  194: * @brief Starts the algorithm server, listens for connections, and handles clients sequentially.
        -:  195: */
function _ZN15AlgorithmServer5startEv called 1 returned 100% blocks executed 65%
        1:  196:void AlgorithmServer::start() {
        -:  197:    // Register signal handler for graceful shutdown
        1:  198:    signal(SIGINT, signal_handler);
call    0 returned 1
        -:  199:
        1:  200:    int server_fd = socket(AF_INET, SOCK_STREAM, 0);
call    0 returned 1
        1:  201:    if (server_fd == -1) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  202:        perror("socket failed");
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  203:        return;
        -:  204:    }
        -:  205:
        1:  206:    sockaddr_in addr{};
        1:  207:    addr.sin_family = AF_INET;
        1:  208:    addr.sin_addr.s_addr = INADDR_ANY;
        1:  209:    addr.sin_port = htons(port_);
        -:  210:
        1:  211:    if (bind(server_fd, (struct sockaddr*)&addr, sizeof(addr)) < 0) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  212:        perror("bind failed");
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  213:        return;
        -:  214:    }
        -:  215:
        1:  216:    if (listen(server_fd, 3) < 0) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  217:        perror("listen failed");
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  218:        return;
        -:  219:    }
        -:  220:
        1:  221:    std::cout << "Algorithm Server listening on port " << port_ << "...\n";
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        -:  222:
        3:  223:    while (!stop_flag) {
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:  224:        sockaddr_in client_addr;
        2:  225:        socklen_t client_len = sizeof(client_addr);
        2:  226:        int client_fd = accept(server_fd, (struct sockaddr*)&client_addr, &client_len);
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
       2*:  227:        if (client_fd < 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  228:            if (stop_flag) break;  // Graceful shutdown
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  229:            perror("accept failed");
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  230:            continue;
        -:  231:        }
        -:  232:
        2:  233:        handleClient(client_fd);
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:  234:    }
        -:  235:
        1:  236:    close(server_fd);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  237:    std::cout << "\nServer shut down gracefully.\n";
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  238:}

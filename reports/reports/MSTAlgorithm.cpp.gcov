        -:    0:Source:MSTAlgorithm.cpp
        -:    1:#include "MSTAlgorithm.hpp"
        -:    2:#include "../graphs/Graph.hpp"
        -:    3:#include <vector>
        -:    4:#include <limits>
        -:    5:#include <queue>
        -:    6:#include <sstream>
        -:    7:
        -:    8:/**
        -:    9: * @brief Executes Prim's algorithm to compute the Minimum Spanning Tree (MST) of the graph.
        -:   10: *
        -:   11: * The algorithm assumes that all edges have equal weight of 1, since the graph is unweighted.
        -:   12: * It starts from vertex 0 and builds the MST greedily using a min-priority queue.
        -:   13: *
        -:   14: * @param graph The graph to compute the MST on.
        -:   15: * @return A string describing the total weight of the MST.
        -:   16: */
function _ZN12MSTAlgorithm3runB5cxx11ERK5Graph called 2 returned 100% blocks executed 64%
        2:   17:std::string MSTAlgorithm::run(const Graph& graph) {
        2:   18:    int n = graph.getSize();
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
       2*:   19:    if (n == 0) return "Graph is empty.\n";
branch  0 taken 0 (fallthrough)
branch  1 taken 2
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
        -:   20:
        4:   21:    std::vector<bool> inMST(n, false);  // Track which vertices are already included in MST
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        4:   22:    std::vector<int> key(n, std::numeric_limits<int>::max()); // Store minimum edge weight to each vertex
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:   23:    key[0] = 0; // Start from vertex 0
call    0 returned 2
        -:   24:
        -:   25:    using Pair = std::pair<int, int>; // (weight, vertex)
        2:   26:    std::priority_queue<Pair, std::vector<Pair>, std::greater<>> pq;
call    0 returned 2
        2:   27:    pq.push({0, 0}); // Push starting vertex
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        -:   28:
        2:   29:    int totalWeight = 0;
        -:   30:
       13:   31:    while (!pq.empty()) {
call    0 returned 13
branch  1 taken 11
branch  2 taken 2 (fallthrough)
       11:   32:        int u = pq.top().second;
call    0 returned 11
       11:   33:        pq.pop();
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
        -:   34:
      11*:   35:        if (inMST[u]) continue; // Skip if already processed
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 11
branch  4 taken 0 (fallthrough)
branch  5 taken 11
       11:   36:        inMST[u] = true;
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 11
       11:   37:        totalWeight += key[u]; // Accumulate MST weight
call    0 returned 11
        -:   38:
        -:   39:        // For each neighbor v of u
       83:   40:        for (int v = 0; v < n; ++v) {
branch  0 taken 72
branch  1 taken 11 (fallthrough)
        -:   41:            // If edge u-v exists, and v not in MST, and current weight to v is higher than 1
       72:   42:            if (graph.edgeExists(u, v) && !inMST[v] && key[v] > 1) {
call    0 returned 72
branch  1 taken 72 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 26 (fallthrough)
branch  4 taken 46
call    5 returned 26
branch  6 taken 26 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 26
branch  9 taken 13 (fallthrough)
branch 10 taken 13
call   11 returned 13
branch 12 taken 9 (fallthrough)
branch 13 taken 4
branch 14 taken 9 (fallthrough)
branch 15 taken 63
        9:   43:                key[v] = 1; // Set weight to 1 (unweighted graph assumption)
call    0 returned 9
        9:   44:                pq.push({key[v], v});
call    0 returned 9
call    1 returned 9
call    2 returned 9
branch  3 taken 9 (fallthrough)
branch  4 taken 0 (throw)
        -:   45:            }
        -:   46:        }
        -:   47:    }
        -:   48:
        2:   49:    std::ostringstream out;
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   50:    out << "Total MST weight (Prim's Algorithm): " << totalWeight << "\n";
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 2
branch  7 taken 2 (fallthrough)
branch  8 taken 0 (throw)
        2:   51:    return out.str();
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   52:}
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed

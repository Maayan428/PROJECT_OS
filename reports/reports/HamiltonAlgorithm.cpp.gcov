        -:    0:Source:HamiltonAlgorithm.cpp
        -:    1:#include "HamiltonAlgorithm.hpp"
        -:    2:#include <vector>
        -:    3:#include <sstream>
        -:    4:
        -:    5:/**
        -:    6: * @brief Recursive utility function to check if a Hamiltonian cycle exists in the graph.
        -:    7: *
        -:    8: * This function attempts to construct a Hamiltonian cycle by exploring
        -:    9: * valid paths recursively using backtracking.
        -:   10: *
        -:   11: * @param graph The graph to search in.
        -:   12: * @param path The current path being built.
        -:   13: * @param visited A boolean array indicating which vertices have been visited.
        -:   14: * @param pos The current position in the path to fill.
        -:   15: * @return true if a Hamiltonian cycle is found, false otherwise.
        -:   16: */
function _ZN17HamiltonAlgorithm17isHamiltonianUtilERK5GraphRSt6vectorIiSaIiEERS3_IbSaIbEEi called 56 returned 100% blocks executed 94%
       56:   17:bool HamiltonAlgorithm::isHamiltonianUtil(const Graph& graph, std::vector<int>& path, std::vector<bool>& visited, int pos) {
       56:   18:    int n = graph.getSize();
call    0 returned 56
        -:   19:    
        -:   20:    // Base case: all vertices are in the path
       56:   21:    if (pos == n) {
branch  0 taken 1 (fallthrough)
branch  1 taken 55
        -:   22:        // Check if the last vertex connects to the starting vertex
        1:   23:        return graph.edgeExists(path[pos - 1], path[0]);
call    0 returned 1
call    1 returned 1
call    2 returned 1
        -:   24:    }
        -:   25:
      639:   26:    for (int v = 1; v < n; ++v) { // Try all vertices except the starting one (0)
branch  0 taken 586
branch  1 taken 53 (fallthrough)
        -:   27:        // If vertex v is connected to the last vertex in path and not yet visited
      586:   28:        if (graph.edgeExists(path[pos - 1], v) && !visited[v]) {
call    0 returned 586
call    1 returned 586
branch  2 taken 586 (fallthrough)
branch  3 taken 0 (throw)
branch  4 taken 118 (fallthrough)
branch  5 taken 468
call    6 returned 118
branch  7 taken 118 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 118
branch 10 taken 54 (fallthrough)
branch 11 taken 64
branch 12 taken 54 (fallthrough)
branch 13 taken 532
call   14 never executed
       54:   29:            path[pos] = v;
call    0 returned 54
       54:   30:            visited[v] = true;
call    0 returned 54
branch  1 taken 54 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 54
call    4 never executed
        -:   31:
        -:   32:            // Recurse to build the next position in path
       54:   33:            if (isHamiltonianUtil(graph, path, visited, pos + 1))
call    0 returned 54
branch  1 taken 2 (fallthrough)
branch  2 taken 52
        2:   34:                return true;
        -:   35:
        -:   36:            // Backtrack
       52:   37:            visited[v] = false;
call    0 returned 52
branch  1 taken 52 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 52
        -:   38:        }
        -:   39:    }
        -:   40:
       53:   41:    return false;
        -:   42:}
        -:   43:
        -:   44:/**
        -:   45: * @brief Executes the Hamiltonian cycle algorithm on the given graph.
        -:   46: *
        -:   47: * Tries to determine whether the graph contains a Hamiltonian cycle
        -:   48: * and returns a description of the result as a string.
        -:   49: *
        -:   50: * @param graph The input graph.
        -:   51: * @return A string indicating whether a Hamiltonian circuit exists, and if so, the path.
        -:   52: */
function _ZN17HamiltonAlgorithm3runB5cxx11ERK5Graph called 2 returned 100% blocks executed 60%
        2:   53:std::string HamiltonAlgorithm::run(const Graph& graph) {
        2:   54:    int n = graph.getSize();
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   55:    if (n == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:   56:        return "Graph is empty.\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:   57:
        4:   58:    std::vector<int> path(n, -1);      // Path to store Hamiltonian cycle
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        4:   59:    std::vector<bool> visited(n, false); // Track visited vertices
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   60:    path[0] = 0; // Start from vertex 0
call    0 returned 2
        2:   61:    visited[0] = true;
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 2
        -:   62:
        2:   63:    std::ostringstream out;
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   64:    if (isHamiltonianUtil(graph, path, visited, 1)) {
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1:   65:        out << "Hamiltonian Circuit Found:\n";
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        4:   66:        for (int i = 0; i < n; ++i)
branch  0 taken 3
branch  1 taken 1 (fallthrough)
        3:   67:            out << path[i] << " ";
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 3
branch  5 taken 3 (fallthrough)
branch  6 taken 0 (throw)
        1:   68:        out << path[0] << "\n"; // Close the cycle
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        -:   69:    } else {
        1:   70:        out << "No Hamiltonian Circuit exists.\n";
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   71:    }
        -:   72:
        2:   73:    return out.str();
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   74:}
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 never executed
call    4 never executed
call    5 never executed

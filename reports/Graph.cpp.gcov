        -:    0:Source:../graphs/Graph.cpp
        -:    1:#include "Graph.hpp"
        -:    2:#include <stdexcept>
        -:    3:#include <random>
        -:    4:#include <iostream>
        -:    5:#include <sstream>
        -:    6:#include <set>
        -:    7:
        -:    8:
        -:    9:/**
        -:   10: * @brief Constructs a graph with the given number of vertices.
        -:   11: * Initializes an adjacency matrix with all values set to 0.
        -:   12: *
        -:   13: * @param size Number of vertices in the graph.
        -:   14: * @throws std::invalid_argument if size is non-positive.
        -:   15: */
function _ZN5GraphC2Ei called 26 returned 100% blocks executed 43%
      104:   16:Graph::Graph(int size) : size(size), adjMatrix(size, std::vector<int>(size, 0)) {
call    0 returned 26
branch  1 taken 26 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 26
branch  4 taken 26 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 26
call    7 never executed
call    8 never executed
       26:   17:    if (size <= 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 26
    #####:   18:        throw std::invalid_argument("Graph size must be positive");
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
call    5 never executed
       26:   19:}
call    0 never executed
        -:   20:
        -:   21:/**
        -:   22: * @brief Adds an undirected edge between vertices u and v.
        -:   23: *
        -:   24: * @param u First vertex.
        -:   25: * @param v Second vertex.
        -:   26: * @throws std::out_of_range if u or v are out of range.
        -:   27: * @throws std::invalid_argument if u == v (self-loop).
        -:   28: * @throws std::logic_error if the edge already exists.
        -:   29: */
function _ZN5Graph7addEdgeEii called 367 returned 100% blocks executed 48%
      367:   30:void Graph::addEdge(int u, int v) {
      367:   31:    if (u < 0 || v < 0 || u >= size || v >= size)
branch  0 taken 367 (fallthrough)
branch  1 taken 0
branch  2 taken 367 (fallthrough)
branch  3 taken 0
branch  4 taken 367 (fallthrough)
branch  5 taken 0
branch  6 taken 0 (fallthrough)
branch  7 taken 367
    #####:   32:        throw std::out_of_range("Vertex index out of range");
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
call    5 never executed
        -:   33:
      367:   34:    if (u == v)
branch  0 taken 0 (fallthrough)
branch  1 taken 367
    #####:   35:        throw std::invalid_argument("Self-loops are not allowed");
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
call    5 never executed
        -:   36:
      367:   37:    if (edgeExists(u, v))
call    0 returned 367
branch  1 taken 0 (fallthrough)
branch  2 taken 367
    #####:   38:        throw std::logic_error("Edge already exists");
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
call    5 never executed
        -:   39:
        -:   40:    // Set both directions since this is an undirected graph
      367:   41:    adjMatrix[u][v] = 1;
call    0 returned 367
call    1 returned 367
      367:   42:    adjMatrix[v][u] = 1;
call    0 returned 367
call    1 returned 367
      367:   43:}
        -:   44:
        -:   45:/**
        -:   46: * @brief Removes the undirected edge between vertices u and v.
        -:   47: *
        -:   48: * @param u First vertex.
        -:   49: * @param v Second vertex.
        -:   50: * @throws std::out_of_range if u or v are out of range.
        -:   51: * @throws std::logic_error if the edge does not exist.
        -:   52: */
function _ZN5Graph10removeEdgeEii called 0 returned 0% blocks executed 0%
    #####:   53:void Graph::removeEdge(int u, int v) {
    #####:   54:    if (u < 0 || v < 0 || u >= size || v >= size)
branch  0 never executed (fallthrough)
branch  1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed
    #####:   55:        throw std::out_of_range("Vertex index out of range");
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
call    5 never executed
        -:   56:
    #####:   57:    if (!edgeExists(u, v))
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:   58:        throw std::logic_error("Edge does not exist");
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
call    5 never executed
        -:   59:
        -:   60:    // Remove the edge in both directions
    #####:   61:    adjMatrix[u][v] = 0;
call    0 never executed
call    1 never executed
    #####:   62:    adjMatrix[v][u] = 0;
call    0 never executed
call    1 never executed
    #####:   63:}
        -:   64:
        -:   65:/**
        -:   66: * @brief Checks whether an edge exists between vertices u and v.
        -:   67: *
        -:   68: * @param u First vertex.
        -:   69: * @param v Second vertex.
        -:   70: * @return true if edge exists, false otherwise.
        -:   71: */
function _ZNK5Graph10edgeExistsEii called 15251 returned 100% blocks executed 89%
    15251:   72:bool Graph::edgeExists(int u, int v) const {
    15251:   73:    if (u < 0 || v < 0 || u >= size || v >= size)
branch  0 taken 15251 (fallthrough)
branch  1 taken 0
branch  2 taken 15251 (fallthrough)
branch  3 taken 0
branch  4 taken 15251 (fallthrough)
branch  5 taken 0
branch  6 taken 0 (fallthrough)
branch  7 taken 15251
    #####:   74:        return false;
        -:   75:
    15251:   76:    return adjMatrix[u][v] == 1;
call    0 returned 15251
call    1 returned 15251
        -:   77:}
        -:   78:
        -:   79:/**
        -:   80: * @brief Returns the number of vertices in the graph.
        -:   81: *
        -:   82: * @return Number of vertices.
        -:   83: */
function _ZNK5Graph7getSizeEv called 434 returned 100% blocks executed 100%
      434:   84:int Graph::getSize() const {
      434:   85:    return size;
        -:   86:}
        -:   87:
        -:   88:/**
        -:   89: * @brief Calculates the degree of a vertex (number of edges connected to it).
        -:   90: *
        -:   91: * @param v The vertex.
        -:   92: * @return Degree of vertex v.
        -:   93: * @throws std::out_of_range if vertex index is invalid.
        -:   94: */
function _ZNK5Graph6degreeEi called 0 returned 0% blocks executed 0%
    #####:   95:int Graph::degree(int v) const {
    #####:   96:    if (v < 0 || v >= size)
branch  0 never executed (fallthrough)
branch  1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:   97:        throw std::out_of_range("Vertex index out of range");
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
call    5 never executed
        -:   98:
    #####:   99:    int deg = 0;
    #####:  100:    for (int i = 0; i < size; ++i)
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  101:        deg += adjMatrix[v][i];  // Count the number of connections (1s)
call    0 never executed
call    1 never executed
    #####:  102:    return deg;
        -:  103:}
        -:  104:
        -:  105:/**
        -:  106: * @brief Returns a const reference to the adjacency matrix.
        -:  107: *
        -:  108: * @return Const reference to the 2D vector representing the adjacency matrix.
        -:  109: */
function _ZNK5Graph12getAdjMatrixEv called 0 returned 0% blocks executed 0%
    #####:  110:const std::vector<std::vector<int>>& Graph::getAdjMatrix() const {
    #####:  111:    return adjMatrix;
        -:  112:}
        -:  113:
        -:  114:
        -:  115:/**
        -:  116: * @brief Randomly generates an undirected graph with a given number of edges and a seed.
        -:  117: *
        -:  118: * Ensures no duplicate edges or self-loops are created.
        -:  119: *
        -:  120: * @param numEdges The number of edges to generate.
        -:  121: * @param seed Seed for the random number generator (to make results reproducible).
        -:  122: * @throws std::logic_error if numEdges is too large for the number of vertices.
        -:  123: */
function _ZN5Graph24generateRandomUndirectedEii called 0 returned 0% blocks executed 0%
    #####:  124:void Graph::generateRandomUndirected(int numEdges, int seed) {
    #####:  125:    int maxEdges = (size * (size - 1)) / 2;
    #####:  126:    if (numEdges > maxEdges)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  127:        throw std::logic_error("Too many edges requested for the graph size.");
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
call    5 never executed
        -:  128:
    #####:  129:    std::mt19937 rng(seed);  // Mersenne Twister random number generator
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  130:    std::uniform_int_distribution<int> dist(0, size - 1);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  131:
    #####:  132:    std::set<std::pair<int, int>> usedEdges;
call    0 never executed
        -:  133:
    #####:  134:    int edgesAdded = 0;
    #####:  135:    while (edgesAdded < numEdges) {
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  136:        int u = dist(rng);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  137:        int v = dist(rng);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  138:        if (u == v) continue;
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  139:
        -:  140:        // Order the pair so (2,3) and (3,2) are treated the same
    #####:  141:        std::pair<int, int> edge = (u < v) ? std::make_pair(u, v) : std::make_pair(v, u);
branch  0 never executed (fallthrough)
branch  1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
        -:  142:
    #####:  143:        if (usedEdges.find(edge) == usedEdges.end()) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    #####:  144:            addEdge(u, v);                // Use existing addEdge() with validations
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  145:            usedEdges.insert(edge);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  146:            edgesAdded++;
        -:  147:        }
        -:  148:    }
    #####:  149:}
call    0 never executed
call    1 never executed
        -:  150:
        -:  151:/**
        -:  152: * @brief Prints the adjacency matrix to the given output stream.
        -:  153: *
        -:  154: * Used by server to send graph structure to clients.
        -:  155: *
        -:  156: * @param out Output stream to write to (e.g., std::stringstream).
        -:  157: */
function _ZNK5Graph20printAdjacencyMatrixERSo called 0 returned 0% blocks executed 0%
    #####:  158:void Graph::printAdjacencyMatrix(std::ostream& out) const {
    #####:  159:    out << "Adjacency Matrix (" << size << " vertices):\n   ";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  160:    for (int i = 0; i < size; ++i) {
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  161:        out << i << " ";
call    0 never executed
call    1 never executed
        -:  162:    }
    #####:  163:    out << "\n";
call    0 never executed
    #####:  164:    for (int i = 0; i < size; ++i) {
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  165:        out << i << ": ";
call    0 never executed
call    1 never executed
    #####:  166:        for (int j = 0; j < size; ++j) {
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  167:            out << adjMatrix[i][j] << " ";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  168:        }
    #####:  169:        out << "\n";
call    0 never executed
        -:  170:    }
    #####:  171:}
        -:  172:
function _ZNK5Graph5printEv called 0 returned 0% blocks executed 0%
    #####:  173:void Graph::print() const {
    #####:  174:    std::cout << "Adjacency Matrix:\n";
call    0 never executed
    #####:  175:    for (const auto& row : adjMatrix) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
    #####:  176:        for (int val : row) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
    #####:  177:            std::cout << val << " ";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -:  178:        }
    #####:  179:        std::cout << "\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  180:    }
    #####:  181:}

        -:    0:Source:SCCAlgorithm.cpp
        -:    1:#include "SCCAlgorithm.hpp"
        -:    2:#include "../graphs/Graph.hpp"
        -:    3:#include <stack>
        -:    4:#include <sstream>
        -:    5:#include <functional>
        -:    6:
        -:    7:/**
        -:    8: * @brief Depth-First Search to collect all vertices reachable from a given vertex.
        -:    9: *
        -:   10: * Used in the second phase of Kosarajuâ€™s algorithm to collect all nodes in a strongly connected component.
        -:   11: *
        -:   12: * @param v The current vertex.
        -:   13: * @param adj The adjacency list of the graph.
        -:   14: * @param visited A boolean vector indicating whether each vertex has been visited.
        -:   15: * @param component The current strongly connected component being constructed.
        -:   16: */
function _ZN12SCCAlgorithm3dfsEiRKSt6vectorIS0_IiSaIiEESaIS2_EERS0_IbSaIbEERS2_ called 7 returned 100% blocks executed 89%
        7:   17:void SCCAlgorithm::dfs(int v, const std::vector<std::vector<int>>& adj, std::vector<bool>& visited, std::vector<int>& component) {
        7:   18:    visited[v] = true;
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 7
call    4 never executed
        7:   19:    component.push_back(v);
call    0 returned 7
       21:   20:    for (int u : adj[v]) {
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 14
call    4 returned 14
call    5 returned 21
branch  6 taken 14
branch  7 taken 7 (fallthrough)
       14:   21:        if (!visited[u]) {
call    0 returned 14
branch  1 taken 14 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 14
branch  4 taken 5 (fallthrough)
branch  5 taken 9
        5:   22:            dfs(u, adj, visited, component);
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        -:   23:        }
        -:   24:    }
        7:   25:}
        -:   26:
        -:   27:/**
        -:   28: * @brief Transposes the given adjacency list (i.e., reverses all edges).
        -:   29: *
        -:   30: * @param adj The original adjacency list.
        -:   31: * @return A new adjacency list representing the transposed graph.
        -:   32: */
function _ZN12SCCAlgorithm9transposeERKSt6vectorIS0_IiSaIiEESaIS2_EE called 1 returned 100% blocks executed 77%
        1:   33:std::vector<std::vector<int>> SCCAlgorithm::transpose(const std::vector<std::vector<int>>& adj) {
        1:   34:    int n = adj.size();
call    0 returned 1
        2:   35:    std::vector<std::vector<int>> trans(n);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 never executed
        8:   36:    for (int u = 0; u < n; ++u) {
branch  0 taken 7
branch  1 taken 1 (fallthrough)
       21:   37:        for (int v : adj[u]) {
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 14
call    4 returned 14
call    5 returned 21
branch  6 taken 14
branch  7 taken 7 (fallthrough)
       14:   38:            trans[v].push_back(u);  // Reverse the edge u -> v to v -> u
call    0 returned 14
call    1 returned 14
branch  2 taken 14 (fallthrough)
branch  3 taken 0 (throw)
        -:   39:        }
        -:   40:    }
        1:   41:    return trans;
    =====:   42:}
call    0 never executed
        -:   43:
        -:   44:/**
        -:   45: * @brief Finds all Strongly Connected Components (SCCs) in the input graph using Kosaraju's algorithm.
        -:   46: *
        -:   47: * Steps:
        -:   48: * 1. Perform DFS to fill a stack based on finish times.
        -:   49: * 2. Transpose the graph.
        -:   50: * 3. Perform DFS on the transposed graph in the order of the stack to identify SCCs.
        -:   51: *
        -:   52: * @param graph The graph on which to perform the algorithm.
        -:   53: * @return A string listing all SCCs found.
        -:   54: */
function _ZN12SCCAlgorithm3runB5cxx11ERK5Graph called 1 returned 100% blocks executed 65%
        1:   55:std::string SCCAlgorithm::run(const Graph& graph) {
        1:   56:    int n = graph.getSize();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   57:    if (n == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   58:        return "Graph is empty.\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:   59:
        -:   60:    // Step 1: Build adjacency list from the graph's adjacency matrix
        2:   61:    std::vector<std::vector<int>> adj(n);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        8:   62:    for (int u = 0; u < n; ++u) {
branch  0 taken 7
branch  1 taken 1 (fallthrough)
       56:   63:        for (int v = 0; v < n; ++v) {
branch  0 taken 49
branch  1 taken 7 (fallthrough)
       49:   64:            if (graph.edgeExists(u, v)) {
call    0 returned 49
branch  1 taken 49 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 14 (fallthrough)
branch  4 taken 35
       14:   65:                adj[u].push_back(v);
call    0 returned 14
call    1 returned 14
branch  2 taken 14 (fallthrough)
branch  3 taken 0 (throw)
        -:   66:            }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:    // Step 2: First DFS to populate the finish stack
        2:   71:    std::vector<bool> visited(n, false);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   72:    std::stack<int> finishStack;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
function _ZZN12SCCAlgorithm3runB5cxx11ERK5GraphENKUliE_clEi called 7 returned 100% blocks executed 89%
    #####:   73:    std::function<void(int)> fillOrder = [&](int v) {
        7:   74:        visited[v] = true;
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 7
call    4 never executed
       21:   75:        for (int u : adj[v]) {
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 14
call    4 returned 14
call    5 returned 21
branch  6 taken 14
branch  7 taken 7 (fallthrough)
       14:   76:            if (!visited[u])
call    0 returned 14
branch  1 taken 14 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 14
branch  4 taken 5 (fallthrough)
branch  5 taken 9
        5:   77:                fillOrder(u);
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        -:   78:        }
        7:   79:        finishStack.push(v);  // Add vertex to stack after visiting all its neighbors
call    0 returned 7
        8:   80:    };
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   81:
        8:   82:    for (int i = 0; i < n; ++i) {
branch  0 taken 7
branch  1 taken 1 (fallthrough)
        7:   83:        if (!visited[i])
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 7
branch  4 taken 2 (fallthrough)
branch  5 taken 5
        2:   84:            fillOrder(i);
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:   85:    }
        -:   86:
        -:   87:    // Step 3: Transpose the graph
        1:   88:    std::vector<std::vector<int>> adjT = transpose(adj);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   89:
        -:   90:    // Step 4: DFS on the transposed graph using the stack order
        1:   91:    visited.assign(n, false);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   92:    std::ostringstream out;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   93:    int count = 0;
        -:   94:
        9:   95:    while (!finishStack.empty()) {
call    0 returned 8
branch  1 taken 7
branch  2 taken 1 (fallthrough)
        7:   96:        int v = finishStack.top();
call    0 returned 7
        7:   97:        finishStack.pop();
call    0 returned 7
        -:   98:
        7:   99:        if (!visited[v]) {
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 7
branch  4 taken 2 (fallthrough)
branch  5 taken 5
        2:  100:            std::vector<int> component;
call    0 returned 2
        2:  101:            dfs(v, adjT, visited, component);  // Collect all reachable vertices in this SCC
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:  102:
        2:  103:            out << "SCC #" << (++count) << ": ";
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 2
branch  7 taken 2 (fallthrough)
branch  8 taken 0 (throw)
        9:  104:            for (int u : component) {
call    0 returned 2
call    1 returned 2
call    2 returned 7
call    3 returned 7
call    4 returned 9
branch  5 taken 7
branch  6 taken 2 (fallthrough)
        7:  105:                out << u << " ";
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        -:  106:            }
        2:  107:            out << "\n";
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  108:        }
call    0 returned 2
call    1 never executed
        -:  109:    }
        -:  110:
        1:  111:    return out.str();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  112:}
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
